
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ru.innopolis.comicon.parser;

import java_cup.runtime.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends lr_parser {

 public final Class getSymbolContainer() {
    return MySymbol.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] =
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\005\004\000\002\005\002" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\006\006\000\002\006\004\000\002\011\006\000\002" +
    "\011\004\000\002\011\006\000\002\007\012\000\002\007" +
    "\011\000\002\007\010\000\002\007\004\000\002\003\011" +
    "\000\002\003\007\000\002\003\004\000\002\010\007\000" +
    "\002\010\006\000\002\010\004\000\002\013\006\000\002" +
    "\016\005\000\002\016\002\000\002\015\005\000\002\015" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\002" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\005\000\002" +
    "\020\004\000\002\021\007\000\002\021\004\000\002\022" +
    "\011\000\002\022\007\000\002\022\004\000\002\023\003" +
    "\000\002\023\004\000\002\023\004\000\002\012\004\000" +
    "\002\012\004\000\002\024\006\000\002\024\005\000\002" +
    "\024\002\000\002\025\006\000\002\025\004\000\002\025" +
    "\005\000\002\026\005\000\002\026\002\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =
    unpackFromStrings(new String[] {
    "\000\170\000\006\003\006\004\007\001\002\000\006\002" +
    "\172\004\007\001\002\000\006\002\uffff\004\uffff\001\002" +
    "\000\006\002\ufffe\004\ufffe\001\002\000\006\003\010\031" +
    "\011\001\002\000\006\002\uffed\004\uffed\001\002\000\006" +
    "\005\012\006\013\001\002\000\004\031\165\001\002\000" +
    "\012\007\ufffc\010\014\011\023\012\021\001\002\000\006" +
    "\003\161\031\162\001\002\000\012\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\001\002\000\012\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\001\002\000\012\007\ufffc\010\014\011\023\012" +
    "\021\001\002\000\012\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\001\002\000\010\003\151\006\152\021\030\001\002\000" +
    "\004\007\147\001\002\000\006\003\024\031\025\001\002" +
    "\000\012\007\ufff0\010\ufff0\011\ufff0\012\ufff0\001\002\000" +
    "\006\021\030\027\027\001\002\000\006\006\140\027\137" +
    "\001\002\000\004\031\043\001\002\000\006\027\031\031" +
    "\032\001\002\000\004\003\042\001\002\000\004\027\040" +
    "\001\002\000\006\022\uffe7\025\uffe7\001\002\000\006\022" +
    "\036\025\035\001\002\000\006\027\031\031\032\001\002" +
    "\000\006\006\uffe9\027\uffe9\001\002\000\006\022\uffe8\025" +
    "\uffe8\001\002\000\004\031\041\001\002\000\006\022\uffe6" +
    "\025\uffe6\001\002\000\006\022\uffe5\025\uffe5\001\002\000" +
    "\004\006\044\001\002\000\030\003\uffe2\007\uffe2\010\uffe2" +
    "\012\uffe2\013\uffe2\015\uffe2\020\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\001\002\000\030\003\064\007\054\010\066" +
    "\012\062\013\052\015\061\020\055\031\056\032\050\033" +
    "\057\034\046\001\002\000\050\003\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\025\uffc6\026\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\001\002\000\032\003\uffe1\007" +
    "\uffe1\010\uffe1\012\uffe1\013\uffe1\015\uffe1\017\uffe1\020\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\034\uffe1\001\002\000\050\003" +
    "\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\025" +
    "\uffc8\026\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\001\002" +
    "\000\032\003\uffde\007\uffde\010\uffde\012\uffde\013\uffde\015" +
    "\uffde\017\uffde\020\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\001\002\000\016\003\132\012\062\031\076\032\050\033" +
    "\057\034\046\001\002\000\050\003\uffce\007\uffce\010\uffce" +
    "\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017" +
    "\uffce\020\uffce\021\116\022\uffce\025\uffce\026\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\001\002\000\012\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\001\002\000\032\003\uffd5\007\uffd5" +
    "\010\uffd5\012\uffd5\013\uffd5\015\uffd5\017\uffd5\020\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\001\002\000\040\003\uffc4" +
    "\007\uffc4\010\uffc4\012\uffc4\013\uffc4\015\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\026\uffc4\030\110\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\001\002\000\050\003\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\025\uffc7\026\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\001\002\000\032\003\uffdf\007\uffdf" +
    "\010\uffdf\012\uffdf\013\uffdf\015\uffdf\017\uffdf\020\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\001\002\000\016\003\100" +
    "\012\062\031\076\032\050\033\057\034\046\001\002\000" +
    "\050\003\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\025\uffc5\026\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\001\002\000\032\003\uffe0\007\uffe0\010\uffe0\012\uffe0\013" +
    "\uffe0\015\uffe0\017\uffe0\020\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\001\002\000\004\030\077\001\002\000\032\003" +
    "\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3\015\uffe3\017\uffe3" +
    "\020\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\001\002\000" +
    "\006\003\071\031\072\001\002\000\032\003\uffdd\007\uffdd" +
    "\010\uffdd\012\uffdd\013\uffdd\015\uffdd\017\uffdd\020\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\001\002\000\032\003\uffe4" +
    "\007\uffe4\010\uffe4\012\uffe4\013\uffe4\015\uffe4\017\uffe4\020" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\001\002\000\032" +
    "\003\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5\015\ufff5\017" +
    "\ufff5\020\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\001\002" +
    "\000\004\027\073\001\002\000\016\003\074\012\062\031" +
    "\076\032\050\033\057\034\046\001\002\000\032\003\ufff4" +
    "\007\ufff4\010\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020" +
    "\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\001\002\000\032" +
    "\003\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6\015\ufff6\017" +
    "\ufff6\020\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\001\002" +
    "\000\050\003\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\025\uffc4\026\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\001\002\000\032\003\uffdb\007\uffdb\010\uffdb\012\uffdb" +
    "\013\uffdb\015\uffdb\017\uffdb\020\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\001\002\000\032\003\uffd6\007\uffd6\010\uffd6" +
    "\012\uffd6\013\uffd6\015\uffd6\017\uffd6\020\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\001\002\000\004\016\102\001\002" +
    "\000\032\003\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2\015" +
    "\uffe2\017\uffe2\020\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\001\002\000\032\003\064\007\105\010\066\012\062\013" +
    "\052\015\061\017\104\020\055\031\056\032\050\033\057" +
    "\034\046\001\002\000\030\003\uffe2\007\uffe2\010\uffe2\012" +
    "\uffe2\013\uffe2\015\uffe2\020\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\001\002\000\032\003\uffd7\007\uffd7\010\uffd7\012" +
    "\uffd7\013\uffd7\015\uffd7\017\uffd7\020\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\001\002\000\030\003\064\007\107\010" +
    "\066\012\062\013\052\015\061\020\055\031\056\032\050" +
    "\033\057\034\046\001\002\000\032\003\uffd8\007\uffd8\010" +
    "\uffd8\012\uffd8\013\uffd8\015\uffd8\017\uffd8\020\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\001\002\000\014\012\062\031" +
    "\076\032\050\033\057\034\046\001\002\000\032\003\uffdc" +
    "\007\uffdc\010\uffdc\012\uffdc\013\uffdc\015\uffdc\017\uffdc\020" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\001\002\000\032" +
    "\003\uffd3\007\uffd3\010\uffd3\012\uffd3\013\uffd3\015\uffd3\017" +
    "\uffd3\020\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\001\002" +
    "\000\032\003\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4\015" +
    "\uffd4\017\uffd4\020\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\001\002\000\046\003\uffd2\007\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\022\uffd2\025\uffd2\026\127\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\001\002\000\044\003\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\022\uffd1\025\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\001\002\000\020\003\120\012\062\022\121\031\076\032" +
    "\050\033\057\034\046\001\002\000\006\022\uffc9\025\uffc9" +
    "\001\002\000\004\022\122\001\002\000\046\003\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\022\uffcc\025\uffcc\026\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\001\002\000\046\003\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\022\uffcb\025\uffcb\026\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\001\002\000\006\022" +
    "\125\025\124\001\002\000\014\012\062\031\076\032\050" +
    "\033\057\034\046\001\002\000\046\003\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\022\uffcd\025\uffcd\026\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\001\002\000\006\022\uffca\025\uffca" +
    "\001\002\000\004\031\130\001\002\000\050\003\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\116\022\uffcf\025\uffcf\026" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\001\002\000\046" +
    "\003\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\022\uffd0\025\uffd0" +
    "\026\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\001\002\000" +
    "\032\003\uffd9\007\uffd9\010\uffd9\012\uffd9\013\uffd9\015\uffd9" +
    "\017\uffd9\020\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\001" +
    "\002\000\004\014\134\001\002\000\030\003\uffe2\007\uffe2" +
    "\010\uffe2\012\uffe2\013\uffe2\015\uffe2\020\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\001\002\000\030\003\064\007\136" +
    "\010\066\012\062\013\052\015\061\020\055\031\056\032" +
    "\050\033\057\034\046\001\002\000\032\003\uffda\007\uffda" +
    "\010\uffda\012\uffda\013\uffda\015\uffda\017\uffda\020\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\001\002\000\004\031\143" +
    "\001\002\000\030\003\uffe2\007\uffe2\010\uffe2\012\uffe2\013" +
    "\uffe2\015\uffe2\020\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\001\002\000\030\003\064\007\142\010\066\012\062\013" +
    "\052\015\061\020\055\031\056\032\050\033\057\034\046" +
    "\001\002\000\012\007\ufff1\010\ufff1\011\ufff1\012\ufff1\001" +
    "\002\000\004\006\144\001\002\000\030\003\uffe2\007\uffe2" +
    "\010\uffe2\012\uffe2\013\uffe2\015\uffe2\020\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\001\002\000\030\003\064\007\146" +
    "\010\066\012\062\013\052\015\061\020\055\031\056\032" +
    "\050\033\057\034\046\001\002\000\012\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\001\002\000\006\002\uffee\004\uffee\001" +
    "\002\000\004\006\155\001\002\000\012\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\001\002\000\030\003\uffe2\007\uffe2\010" +
    "\uffe2\012\uffe2\013\uffe2\015\uffe2\020\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\001\002\000\030\003\064\007\154\010" +
    "\066\012\062\013\052\015\061\020\055\031\056\032\050" +
    "\033\057\034\046\001\002\000\012\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\001\002\000\030\003\uffe2\007\uffe2\010\uffe2" +
    "\012\uffe2\013\uffe2\015\uffe2\020\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\001\002\000\030\003\064\007\157\010\066" +
    "\012\062\013\052\015\061\020\055\031\056\032\050\033" +
    "\057\034\046\001\002\000\012\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\001\002\000\004\007\ufffd\001\002\000\012\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\001\002\000\004\027\163" +
    "\001\002\000\014\012\062\031\076\032\050\033\057\034" +
    "\046\001\002\000\012\007\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\001\002\000\004\006\166\001\002\000\012\007\ufffc\010" +
    "\014\011\023\012\021\001\002\000\004\007\170\001\002" +
    "\000\006\002\uffef\004\uffef\001\002\000\006\002\000\004" +
    "\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
    unpackFromStrings(new String[] {
    "\000\170\000\006\002\003\003\004\001\001\000\004\003" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\016\005\021\006\015\007\017\010\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\016\005\157\006\015\007\017\010\014" +
    "\001\001\000\002\001\001\000\004\013\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\033\001\001\000\002\001\001\000\004\015" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\044\001\001\000\022\011\067\012\066" +
    "\017\064\020\046\021\062\022\057\023\050\027\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\132\027\052\001\001\000" +
    "\006\024\113\025\114\001\001\000\002\001\001\000\006" +
    "\012\112\027\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\100\027\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\074\027\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\102\001\001\000\022\011\067" +
    "\012\066\017\064\020\046\021\062\022\057\023\050\027" +
    "\052\001\001\000\004\014\105\001\001\000\002\001\001" +
    "\000\022\011\067\012\066\017\064\020\046\021\062\022" +
    "\057\023\050\027\052\001\001\000\002\001\001\000\006" +
    "\012\110\027\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\116\027\052\001\001\000\004\026\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\125\027\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\134\001\001\000\022\011\067" +
    "\012\066\017\064\020\046\021\062\022\057\023\050\027" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\140\001\001\000\022\011\067\012\066\017\064\020" +
    "\046\021\062\022\057\023\050\027\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\144\001\001\000" +
    "\022\011\067\012\066\017\064\020\046\021\062\022\057" +
    "\023\050\027\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\152" +
    "\001\001\000\022\011\067\012\066\017\064\020\046\021" +
    "\062\022\057\023\050\027\052\001\001\000\002\001\001" +
    "\000\004\014\155\001\001\000\022\011\067\012\066\017" +
    "\064\020\046\021\062\022\057\023\050\027\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\163\027\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\016\005\166\006" +
    "\015\007\017\010\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    final String LINE() {
        if (this.cur_token == null || ((ComplexSymbolFactory.ComplexSymbol)this.cur_token).xleft == null) {
            return "unknown";
        }
        return Integer.toString(((ComplexSymbolFactory.ComplexSymbol)this.cur_token).xleft.getLine());
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Program ClassDeclaration
            {
              Object RESULT =null;
		int programleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int programright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object program = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object cd = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = program + "" + cd;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= ClassDeclaration
            {
              Object RESULT =null;
		int cdleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object cd = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cd + "";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= error
            {
              Object RESULT =null;
		 RESULT = null; System.out.println("Compilation error");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MemeberDeclarations ::= MemeberDeclaration MemeberDeclarations
            {
              Object RESULT =null;
		int memberleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int memberright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object member = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int membersleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int membersright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object members = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = member + "\n" + members;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclarations",3, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MemeberDeclarations ::=
            {
              Object RESULT =null;
		 RESULT = "";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclarations",3, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MemeberDeclaration ::= VariableDeclaration
            {
              Object RESULT =null;
		int varleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = var;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclaration",2, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MemeberDeclaration ::= MethodDeclaration
            {
              Object RESULT =null;
		int methodleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int methodright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object method = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = method;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclaration",2, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MemeberDeclaration ::= ConstructorDeclaration
            {
              Object RESULT =null;
		int cnstrctrleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int cnstrctrright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object cnstrctr = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cnstrctr;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclaration",2, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VariableDeclaration ::= VAR IDENTIFIER COLON Expression
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((Symbol) CUP$Parser$stack.peek()).value;

    String stype = type.toString();
    if (stype.contains("(")) {
        RESULT = "public " + stype.split("[(]")[0] + " " + name + " = new " + type + ";";
    } else {
        RESULT = "public " + stype + " " + name + " = new " + type + "();";
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",4, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDeclaration ::= VAR error
            {
              Object RESULT =null;
		 System.out.println("Error in variable declaration in class");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",4, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VariableDeclarationInMethod ::= VAR IDENTIFIER COLON Expression
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((Symbol) CUP$Parser$stack.peek()).value;

    String stype = type.toString();
    if (stype.contains("(")) {
        RESULT = stype.split("[(]")[0] + " " + name + " = new " + type + ";";
    } else {
        RESULT = stype + " " + name + " = new " + type + "();";
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationInMethod",7, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VariableDeclarationInMethod ::= VAR error
            {
              Object RESULT =null;

    System.out.println("Error in variable declaration in method around line #" + parser.LINE());
    RESULT = null;
    parser._done_parsing = true;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationInMethod",7, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VariableDeclarationInMethod ::= VAR IDENTIFIER COLON error
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

                                                    System.out.println("Error in variable declaration in method around line #" + parser.LINE());
                                                    RESULT = null;
                                                    parser._done_parsing = true;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationInMethod",7, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MethodDeclaration ::= METHOD IDENTIFIER Parameters COLON IDENTIFIER IS Body END
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int argsleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int argsright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object args = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int return_typeleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int return_typeright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String return_type = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    RESULT = "public " + return_type + " " + name + args + " { " + body + "}";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MethodDeclaration ::= METHOD IDENTIFIER COLON IDENTIFIER IS Body END
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int return_typeleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int return_typeright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String return_type = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    RESULT = "public " + return_type + name + " () { " + body + "}";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MethodDeclaration ::= METHOD IDENTIFIER Parameters IS Body END
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int argsleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int argsright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object args = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    RESULT = "public void " + name + args + " { " + body + "}";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MethodDeclaration ::= METHOD error
            {
              Object RESULT =null;

    System.out.println("Error in method declaration around line #" + parser.LINE());
    RESULT = null;
    parser._done_parsing = true;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ClassDeclaration ::= CLASS IDENTIFIER EXTENDS IDENTIFIER IS MemeberDeclarations END
            {
              Object RESULT =null;
		int class_idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int class_idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String class_id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int extends_idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int extends_idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String extends_id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int membersleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int membersright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object members = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

  members = members.toString().replaceAll("<CLASSNAME>", class_id);
  RESULT = "public class " + class_id + " extends " + extends_id + " { " + members + "}";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",1, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ClassDeclaration ::= CLASS IDENTIFIER IS MemeberDeclarations END
            {
              Object RESULT =null;
		int class_idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int class_idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String class_id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int membersleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int membersright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object members = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    members = members.toString().replaceAll("<CLASSNAME>", class_id);
    RESULT = "public class " + class_id + " {\n" + members + "}";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",1, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ClassDeclaration ::= CLASS error
            {
              Object RESULT =null;
		System.out.println("Error in class declaration around line #" + parser.LINE());
                                                                                RESULT = null;
                                                                                parser._done_parsing = true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",1, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ConstructorDeclaration ::= THIS Parameters IS Body END
            {
              Object RESULT =null;
		int parametersleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int parametersright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object parameters = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "public " + "<CLASSNAME>" + parameters + "{\n" + body + "\n}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",6, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ConstructorDeclaration ::= THIS IS Body END
            {
              Object RESULT =null;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "public " + "<CLASSNAME>" + "()" + "{\n" + body + "\n}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",6, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ConstructorDeclaration ::= THIS error
            {
              Object RESULT =null;
		 System.out.println("Error in Constructor Declaration around line #" + parser.LINE());
                                                                                                 RESULT = null;
                                                                                                 parser._done_parsing = true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",6, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Parameters ::= LPAREN ParameterDeclaration ParameterDeclarations RPAREN
            {
              Object RESULT =null;
		int paramleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object param = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramsleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object params = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "(" + param + params + ")";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",9, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ParameterDeclarations ::= ParameterDeclarations COMMA ParameterDeclaration
            {
              Object RESULT =null;
		int paramsleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object params = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object param = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = params + "," + param;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclarations",12, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParameterDeclarations ::=
            {
              Object RESULT =null;
		 RESULT = "" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclarations",12, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParameterDeclaration ::= IDENTIFIER COLON IDENTIFIER
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((Symbol)CUP$Parser$stack.peek()).right;
		String type = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type + " " + name ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclaration",11, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParameterDeclaration ::= COLON error
            {
              Object RESULT =null;
		 System.out.println("Error in parameter declaration  around line #" + parser.LINE());
                                                                                                    RESULT = null;
                                                                                                    parser._done_parsing = true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclaration",11, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Body ::= Body VariableDeclarationInMethod
            {
              Object RESULT =null;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = body + "\n" + var ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",10, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Body ::= Body Statement
            {
              Object RESULT =null;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statementleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int statementright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object statement = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = body + "\n" + statement;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",10, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Body ::=
            {
              Object RESULT =null;
		 RESULT = "";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",10, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= Assignment
            {
              Object RESULT =null;
		int assignmentleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int assignmentright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object assignment = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = assignment + "\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= WhileLoop
            {
              Object RESULT =null;
		int whileloopleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int whileloopright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object whileloop = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = whileloop + "\n" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= IfStatement
            {
              Object RESULT =null;
		int ifstatementleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int ifstatementright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object ifstatement = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ifstatement + "\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= ReturnStatement
            {
              Object RESULT =null;
		int returnstatementleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int returnstatementright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object returnstatement = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = returnstatement + "\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= Expression
            {
              Object RESULT =null;
		int expressionleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object expression = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expression + ";\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Assignment ::= IDENTIFIER ASSIGN Expression
            {
              Object RESULT =null;
		int identifierleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identifierright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String identifier = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object expr = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = identifier + " = " + expr + ";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",14, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Assignment ::= error ASSIGN
            {
              Object RESULT =null;
		 System.out.println("Error in Assignment around line #" + parser.LINE());
                                                                                             RESULT = null;
                                                                                             parser._done_parsing = true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",14, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // WhileLoop ::= WHILE Expression LOOP Body END
            {
              Object RESULT =null;
		int exprleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expr = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "while ( " + expr + " ) {\n" + body + "}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileLoop",15, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // WhileLoop ::= WHILE error
            {
              Object RESULT =null;
		 System.out.println("Error in while loop around line #" + parser.LINE());
                                                                                             RESULT = null;
                                                                                             parser._done_parsing = true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileLoop",15, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IfStatement ::= IF Expression THEN Body ELSE Body END
            {
              Object RESULT =null;
		int exprleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object expr = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int body_thenleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int body_thenright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object body_then = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int body_elseleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int body_elseright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body_else = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

  RESULT = "if ( " + expr + ") { " + body_then + "} else { " + body_else + "}" ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",16, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IfStatement ::= IF Expression THEN Body END
            {
              Object RESULT =null;
		int exprleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expr = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

RESULT = "if ( " + expr + " ) { " + body + "}"  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",16, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IfStatement ::= IF error
            {
              Object RESULT =null;
		 System.out.println("Error in if statement  around line #" + parser.LINE());
                                                                                         RESULT = null;
                                                                                         parser._done_parsing = true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",16, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ReturnStatement ::= RETURN
            {
              Object RESULT =null;
		 RESULT = "return;"  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",17, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ReturnStatement ::= RETURN Expression
            {
              Object RESULT =null;
		int exprleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object expr = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "return" + expr + ";"  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",17, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ReturnStatement ::= RETURN error
            {
              Object RESULT =null;
		 System.out.println("Error in return statement around line #" + parser.LINE());
                                                                                RESULT = null;
                                                                                parser._done_parsing = true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",17, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= Primary ExpressionBody
            {
              Object RESULT =null;
		int primleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int primright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String prim = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = prim + body;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= Primary Arguments
            {
              Object RESULT =null;
		int primleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int primright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String prim = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object args = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = prim + args;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpressionBody ::= ExpressionBody DOT IDENTIFIER Arguments
            {
              Object RESULT =null;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object arg = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = body + "." + id + arg;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionBody",18, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpressionBody ::= ExpressionBody DOT IDENTIFIER
            {
              Object RESULT =null;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = body + "." + id ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionBody",18, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExpressionBody ::=
            {
              Object RESULT =null;
		 RESULT = ""  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionBody",18, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Arguments ::= LPAREN Expression ArgumentExpression RPAREN
            {
              Object RESULT =null;
		int expleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aexpleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aexpright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object aexp = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "(" + exp + aexp + ")" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",19, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Arguments ::= LPAREN RPAREN
            {
              Object RESULT =null;
		 RESULT = "()";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",19, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Arguments ::= LPAREN error RPAREN
            {
              Object RESULT =null;
		 System.out.println("No matching parentheses around line #" + parser.LINE());
                                                            RESULT = null; parser._done_parsing = true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",19, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ArgumentExpression ::= ArgumentExpression COMMA Expression
            {
              Object RESULT =null;
		int aexpleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aexpright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object aexp = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = aexp + ", " + exp  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentExpression",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ArgumentExpression ::=
            {
              Object RESULT =null;
		 RESULT = ""  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentExpression",20, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Primary ::= INTEGERLITERAL
            {
              String RESULT =null;
		int integerleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int integerright = ((Symbol)CUP$Parser$stack.peek()).right;
		String integer = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = integer ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",21, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Primary ::= REALLITERAL
            {
              String RESULT =null;
		int realleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int realright = ((Symbol)CUP$Parser$stack.peek()).right;
		String real = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = real  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",21, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Primary ::= BOOLEANLITERAL
            {
              String RESULT =null;
		int boolleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((Symbol)CUP$Parser$stack.peek()).right;
		String bool = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bool  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",21, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Primary ::= THIS
            {
              String RESULT =null;
		 RESULT = "this";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",21, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Primary ::= IDENTIFIER
            {
              String RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",21, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
