
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ru.innopolis.comicon.parser;

import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java_cup.runtime.lr_parser;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends lr_parser {

 public final Class getSymbolContainer() {
    return MySymbol.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] =
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\005\004\000\002\005\002\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\006\006\000" +
    "\002\011\006\000\002\007\012\000\002\007\011\000\002" +
    "\007\010\000\002\003\011\000\002\003\007\000\002\010" +
    "\007\000\002\010\006\000\002\013\006\000\002\016\005" +
    "\000\002\016\002\000\002\015\005\000\002\014\004\000" +
    "\002\014\004\000\002\014\002\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\020\005\000\002\021\007\000\002\022\011" +
    "\000\002\022\007\000\002\023\003\000\002\023\004\000" +
    "\002\012\004\000\002\012\004\000\002\024\006\000\002" +
    "\024\005\000\002\024\002\000\002\025\006\000\002\025" +
    "\004\000\002\026\005\000\002\026\002\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =
    unpackFromStrings(new String[] {
    "\000\150\000\004\004\006\001\002\000\006\002\152\004" +
    "\006\001\002\000\006\002\uffff\004\uffff\001\002\000\004" +
    "\031\007\001\002\000\006\005\010\006\011\001\002\000" +
    "\004\031\145\001\002\000\012\007\ufffd\010\013\011\021" +
    "\012\020\001\002\000\012\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\001\002\000\004\031\142\001\002\000\012\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\001\002\000\012\007\ufffd\010" +
    "\013\011\021\012\020\001\002\000\012\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\001\002\000\004\007\140\001\002\000" +
    "\006\006\132\021\025\001\002\000\004\031\022\001\002" +
    "\000\006\021\025\027\024\001\002\000\006\006\122\027" +
    "\121\001\002\000\004\031\036\001\002\000\004\031\026" +
    "\001\002\000\004\027\034\001\002\000\006\022\uffee\025" +
    "\uffee\001\002\000\006\022\032\025\031\001\002\000\004" +
    "\031\026\001\002\000\006\006\ufff0\027\ufff0\001\002\000" +
    "\006\022\uffef\025\uffef\001\002\000\004\031\035\001\002" +
    "\000\006\022\uffed\025\uffed\001\002\000\004\006\037\001" +
    "\002\000\026\007\uffea\010\uffea\012\uffea\013\uffea\015\uffea" +
    "\020\uffea\031\uffea\032\uffea\033\uffea\034\uffea\001\002\000" +
    "\026\007\047\010\061\012\055\013\045\015\054\020\050" +
    "\031\051\032\043\033\052\034\041\001\002\000\046\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\025\uffd3\026" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\001\002\000\030" +
    "\007\uffe9\010\uffe9\012\uffe9\013\uffe9\015\uffe9\017\uffe9\020" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\001\002\000\046" +
    "\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\025\uffd5" +
    "\026\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\001\002\000" +
    "\030\007\uffe6\010\uffe6\012\uffe6\013\uffe6\015\uffe6\017\uffe6" +
    "\020\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\001\002\000" +
    "\014\012\055\031\066\032\043\033\052\034\041\001\002" +
    "\000\046\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\103\022\uffda" +
    "\025\uffda\026\uffda\031\uffda\032\uffda\033\uffda\034\uffda\001" +
    "\002\000\012\007\ufff6\010\ufff6\011\ufff6\012\ufff6\001\002" +
    "\000\030\007\uffe0\010\uffe0\012\uffe0\013\uffe0\015\uffe0\017" +
    "\uffe0\020\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\001\002" +
    "\000\036\007\uffd1\010\uffd1\012\uffd1\013\uffd1\015\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\026\uffd1\030\076\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\001\002\000\046\007\uffd4\010\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\025\uffd4\026\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\001\002\000\030\007\uffe7\010\uffe7" +
    "\012\uffe7\013\uffe7\015\uffe7\017\uffe7\020\uffe7\031\uffe7\032" +
    "\uffe7\033\uffe7\034\uffe7\001\002\000\014\012\055\031\066" +
    "\032\043\033\052\034\041\001\002\000\046\007\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\025\uffd2\026\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\001\002\000\030\007\uffe8" +
    "\010\uffe8\012\uffe8\013\uffe8\015\uffe8\017\uffe8\020\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\001\002\000\030\007\uffeb" +
    "\010\uffeb\012\uffeb\013\uffeb\015\uffeb\017\uffeb\020\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\001\002\000\030\007\uffe5" +
    "\010\uffe5\012\uffe5\013\uffe5\015\uffe5\017\uffe5\020\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\001\002\000\004\031\063" +
    "\001\002\000\030\007\uffec\010\uffec\012\uffec\013\uffec\015" +
    "\uffec\017\uffec\020\uffec\031\uffec\032\uffec\033\uffec\034\uffec" +
    "\001\002\000\004\027\064\001\002\000\014\012\055\031" +
    "\066\032\043\033\052\034\041\001\002\000\030\007\ufff8" +
    "\010\ufff8\012\ufff8\013\ufff8\015\ufff8\017\ufff8\020\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\001\002\000\046\007\uffd1" +
    "\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\025\uffd1\026\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\001\002\000\004\016" +
    "\070\001\002\000\030\007\uffea\010\uffea\012\uffea\013\uffea" +
    "\015\uffea\017\uffea\020\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\001\002\000\030\007\073\010\061\012\055\013\045" +
    "\015\054\017\072\020\050\031\051\032\043\033\052\034" +
    "\041\001\002\000\026\007\uffea\010\uffea\012\uffea\013\uffea" +
    "\015\uffea\020\uffea\031\uffea\032\uffea\033\uffea\034\uffea\001" +
    "\002\000\030\007\uffe1\010\uffe1\012\uffe1\013\uffe1\015\uffe1" +
    "\017\uffe1\020\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\001" +
    "\002\000\026\007\075\010\061\012\055\013\045\015\054" +
    "\020\050\031\051\032\043\033\052\034\041\001\002\000" +
    "\030\007\uffe2\010\uffe2\012\uffe2\013\uffe2\015\uffe2\017\uffe2" +
    "\020\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\001\002\000" +
    "\014\012\055\031\066\032\043\033\052\034\041\001\002" +
    "\000\030\007\uffe4\010\uffe4\012\uffe4\013\uffe4\015\uffe4\017" +
    "\uffe4\020\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\001\002" +
    "\000\030\007\uffdf\010\uffdf\012\uffdf\013\uffdf\015\uffdf\017" +
    "\uffdf\020\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\001\002" +
    "\000\044\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\022\uffde\025\uffde" +
    "\026\112\031\uffde\032\uffde\033\uffde\034\uffde\001\002\000" +
    "\042\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\022\uffdd\025\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\001\002\000\016\012\055" +
    "\022\104\031\066\032\043\033\052\034\041\001\002\000" +
    "\044\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8\025\uffd8\026" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\001\002\000\006" +
    "\022\uffd6\025\uffd6\001\002\000\006\022\110\025\107\001" +
    "\002\000\014\012\055\031\066\032\043\033\052\034\041" +
    "\001\002\000\044\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\022\uffd9" +
    "\025\uffd9\026\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\001" +
    "\002\000\006\022\uffd7\025\uffd7\001\002\000\004\031\113" +
    "\001\002\000\046\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\103" +
    "\022\uffdb\025\uffdb\026\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\001\002\000\044\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\022" +
    "\uffdc\025\uffdc\026\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\001\002\000\004\014\116\001\002\000\026\007\uffea\010" +
    "\uffea\012\uffea\013\uffea\015\uffea\020\uffea\031\uffea\032\uffea" +
    "\033\uffea\034\uffea\001\002\000\026\007\120\010\061\012" +
    "\055\013\045\015\054\020\050\031\051\032\043\033\052" +
    "\034\041\001\002\000\030\007\uffe3\010\uffe3\012\uffe3\013" +
    "\uffe3\015\uffe3\017\uffe3\020\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\001\002\000\004\031\125\001\002\000\026\007" +
    "\uffea\010\uffea\012\uffea\013\uffea\015\uffea\020\uffea\031\uffea" +
    "\032\uffea\033\uffea\034\uffea\001\002\000\026\007\124\010" +
    "\061\012\055\013\045\015\054\020\050\031\051\032\043" +
    "\033\052\034\041\001\002\000\012\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\001\002\000\004\006\126\001\002\000\026" +
    "\007\uffea\010\uffea\012\uffea\013\uffea\015\uffea\020\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\001\002\000\026\007\130" +
    "\010\061\012\055\013\045\015\054\020\050\031\051\032" +
    "\043\033\052\034\041\001\002\000\012\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\001\002\000\004\006\135\001\002\000" +
    "\026\007\uffea\010\uffea\012\uffea\013\uffea\015\uffea\020\uffea" +
    "\031\uffea\032\uffea\033\uffea\034\uffea\001\002\000\026\007" +
    "\134\010\061\012\055\013\045\015\054\020\050\031\051" +
    "\032\043\033\052\034\041\001\002\000\012\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\001\002\000\026\007\uffea\010\uffea" +
    "\012\uffea\013\uffea\015\uffea\020\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\001\002\000\026\007\137\010\061\012\055" +
    "\013\045\015\054\020\050\031\051\032\043\033\052\034" +
    "\041\001\002\000\012\007\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\001\002\000\006\002\ufff3\004\ufff3\001\002\000\004\007" +
    "\ufffe\001\002\000\004\027\143\001\002\000\014\012\055" +
    "\031\066\032\043\033\052\034\041\001\002\000\012\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\001\002\000\004\006\146" +
    "\001\002\000\012\007\ufffd\010\013\011\021\012\020\001" +
    "\002\000\004\007\150\001\002\000\006\002\ufff4\004\ufff4" +
    "\001\002\000\006\002\001\004\001\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
    unpackFromStrings(new String[] {
    "\000\150\000\006\002\003\003\004\001\001\000\004\003" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\014\005\016\006" +
    "\013\007\015\010\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\014\005\140\006" +
    "\013\007\015\010\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\130\001\001\000\002\001\001\000" +
    "\004\013\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\026\001\001\000\002\001\001\000\004\016" +
    "\027\001\001\000\002\001\001\000\004\015\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\037\001\001" +
    "\000\022\011\061\012\057\017\056\020\041\021\055\022" +
    "\052\023\043\027\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\114\027\045\001\001\000\006\024\100\025\101\001\001" +
    "\000\002\001\001\000\006\012\077\027\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\066\027\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\064\027" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\070\001\001\000\022\011\061\012" +
    "\057\017\056\020\041\021\055\022\052\023\043\027\045" +
    "\001\001\000\004\014\073\001\001\000\002\001\001\000" +
    "\022\011\061\012\057\017\056\020\041\021\055\022\052" +
    "\023\043\027\045\001\001\000\002\001\001\000\006\012" +
    "\076\027\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\104\027" +
    "\045\001\001\000\002\001\001\000\004\026\105\001\001" +
    "\000\002\001\001\000\006\012\110\027\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\116\001\001\000\022\011\061\012\057\017\056" +
    "\020\041\021\055\022\052\023\043\027\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\122\001\001" +
    "\000\022\011\061\012\057\017\056\020\041\021\055\022" +
    "\052\023\043\027\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\126\001\001\000\022\011\061\012" +
    "\057\017\056\020\041\021\055\022\052\023\043\027\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\132\001\001\000\022\011\061\012\057\017\056\020\041" +
    "\021\055\022\052\023\043\027\045\001\001\000\002\001" +
    "\001\000\004\014\135\001\001\000\022\011\061\012\057" +
    "\017\056\020\041\021\055\022\052\023\043\027\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\143\027\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\014\005\146" +
    "\006\013\007\015\010\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String CLASS_NAME;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Program ClassDeclaration
            {
              Object RESULT =null;
		int programleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int programright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object program = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object cd = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = program + "" + cd; System.out.print(program + "" + cd);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= ClassDeclaration
            {
              Object RESULT =null;
		int cdleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object cd = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cd + ""; System.out.print("" + cd);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MemeberDeclarations ::= MemeberDeclaration MemeberDeclarations
            {
              Object RESULT =null;
		int memberleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int memberright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object member = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int membersleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int membersright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object members = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = member + "\n" + members;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclarations",3, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MemeberDeclarations ::=
            {
              Object RESULT =null;
		 RESULT = "";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclarations",3, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MemeberDeclaration ::= VariableDeclaration
            {
              Object RESULT =null;
		int varleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = var;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclaration",2, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MemeberDeclaration ::= MethodDeclaration
            {
              Object RESULT =null;
		int methodleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int methodright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object method = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = method;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclaration",2, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MemeberDeclaration ::= ConstructorDeclaration
            {
              Object RESULT =null;
		int cnstrctrleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int cnstrctrright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object cnstrctr = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cnstrctr;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclaration",2, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VariableDeclaration ::= VAR IDENTIFIER COLON Expression
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((Symbol) CUP$Parser$stack.peek()).value;

    String stype = type.toString();
    if (stype.contains("(")) {
        RESULT = "public " + stype.split("[(]")[0] + " " + name + " = new " + type + ";";
    } else {
        RESULT = "public " + stype + " " + name + " = new " + type + "();";
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",4, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VariableDeclarationInMethod ::= VAR IDENTIFIER COLON Expression
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((Symbol) CUP$Parser$stack.peek()).value;

    String stype = type.toString();
    if (stype.contains("(")) {
        RESULT = stype.split("[(]")[0] + " " + name + " = new " + type + ";";
    } else {
        RESULT = stype + " " + name + " = new " + type + "();";
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationInMethod",7, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MethodDeclaration ::= METHOD IDENTIFIER Parameters COLON IDENTIFIER IS Body END
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int argsleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int argsright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object args = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int return_typeleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int return_typeright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String return_type = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    RESULT = "public " + return_type + " " + name + args + " { " + body + "}";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MethodDeclaration ::= METHOD IDENTIFIER COLON IDENTIFIER IS Body END
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int return_typeleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int return_typeright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String return_type = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    RESULT = "public " + return_type + name + " () { " + body + "}";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MethodDeclaration ::= METHOD IDENTIFIER Parameters IS Body END
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int argsleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int argsright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object args = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    RESULT = "public void " + name + args + " { " + body + "}";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ClassDeclaration ::= CLASS IDENTIFIER EXTENDS IDENTIFIER IS MemeberDeclarations END
            {
              Object RESULT =null;
		int class_idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int class_idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String class_id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int extends_idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int extends_idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String extends_id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int membersleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int membersright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object members = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

  members = members.toString().replaceAll("<CLASSNAME>", class_id);
  RESULT = "public class " + class_id + " extends " + extends_id + " { " + members + "}";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",1, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ClassDeclaration ::= CLASS IDENTIFIER IS MemeberDeclarations END
            {
              Object RESULT =null;
		int class_idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int class_idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String class_id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int membersleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int membersright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object members = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    members = members.toString().replaceAll("<CLASSNAME>", class_id);
    RESULT = "public class " + class_id + " {\n" + members + "}";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",1, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstructorDeclaration ::= THIS Parameters IS Body END
            {
              Object RESULT =null;
		int parametersleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int parametersright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object parameters = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "public " + "<CLASSNAME>" + parameters + "{\n" + body + "\n}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",6, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstructorDeclaration ::= THIS IS Body END
            {
              Object RESULT =null;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "public " + "<CLASSNAME>" + "()" + "{\n" + body + "\n}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",6, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Parameters ::= LPAREN ParameterDeclaration ParameterDeclarations RPAREN
            {
              Object RESULT =null;
		int paramleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object param = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramsleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object params = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "(" + param + params + ")";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",9, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ParameterDeclarations ::= ParameterDeclarations COMMA ParameterDeclaration
            {
              Object RESULT =null;
		int paramsleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object params = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object param = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = params + "," + param;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclarations",12, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ParameterDeclarations ::=
            {
              Object RESULT =null;
		 RESULT = "" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclarations",12, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ParameterDeclaration ::= IDENTIFIER COLON IDENTIFIER
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((Symbol)CUP$Parser$stack.peek()).right;
		String type = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type + " " + name ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclaration",11, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Body ::= Body VariableDeclarationInMethod
            {
              Object RESULT =null;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = body + "\n" + var ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",10, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Body ::= Body Statement
            {
              Object RESULT =null;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statementleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int statementright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object statement = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = body + "\n" + statement;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",10, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Body ::=
            {
              Object RESULT =null;
		 RESULT = ""  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",10, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= Assignment
            {
              Object RESULT =null;
		int assignmentleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int assignmentright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object assignment = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = assignment + "\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= WhileLoop
            {
              Object RESULT =null;
		int whileloopleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int whileloopright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object whileloop = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = whileloop + "\n" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= IfStatement
            {
              Object RESULT =null;
		int ifstatementleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int ifstatementright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object ifstatement = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ifstatement + "\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= ReturnStatement
            {
              Object RESULT =null;
		int returnstatementleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int returnstatementright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object returnstatement = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = returnstatement + "\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= Expression
            {
              Object RESULT =null;
		int expressionleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object expression = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expression + ";\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",13, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Assignment ::= IDENTIFIER ASSIGN Expression
            {
              Object RESULT =null;
		int identifierleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identifierright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String identifier = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object expr = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = identifier + " = " + expr + ";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",14, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // WhileLoop ::= WHILE Expression LOOP Body END
            {
              Object RESULT =null;
		int exprleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expr = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "while ( " + expr + " ) {\n" + body + "}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileLoop",15, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IfStatement ::= IF Expression THEN Body ELSE Body END
            {
              Object RESULT =null;
		int exprleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object expr = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int body_thenleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int body_thenright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object body_then = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int body_elseleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int body_elseright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body_else = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

  RESULT = "if ( " + expr + ") { " + body_then + "} else { " + body_else + "}" ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",16, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IfStatement ::= IF Expression THEN Body END
            {
              Object RESULT =null;
		int exprleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expr = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

RESULT = "if ( " + expr + " ) { " + body + "}"  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",16, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ReturnStatement ::= RETURN
            {
              Object RESULT =null;
		 RESULT = "return;"  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",17, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ReturnStatement ::= RETURN Expression
            {
              Object RESULT =null;
		int exprleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object expr = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "return" + expr + ";"  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",17, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= Primary ExpressionBody
            {
              Object RESULT =null;
		int primleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int primright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String prim = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = prim + body;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Primary Arguments
            {
              Object RESULT =null;
		int primleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int primright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String prim = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object args = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = prim + args;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ExpressionBody ::= ExpressionBody DOT IDENTIFIER Arguments
            {
              Object RESULT =null;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object arg = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = body + "." + id + arg;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionBody",18, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ExpressionBody ::= ExpressionBody DOT IDENTIFIER
            {
              Object RESULT =null;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = body + "." + id ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionBody",18, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ExpressionBody ::=
            {
              Object RESULT =null;
		 RESULT = ""  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionBody",18, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Arguments ::= LPAREN Expression ArgumentExpression RPAREN
            {
              Object RESULT =null;
		int expleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aexpleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aexpright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object aexp = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "(" + exp + aexp + ")" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",19, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Arguments ::= LPAREN RPAREN
            {
              Object RESULT =null;
		 RESULT = "()";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",19, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ArgumentExpression ::= ArgumentExpression COMMA Expression
            {
              Object RESULT =null;
		int aexpleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aexpright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object aexp = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = aexp + ", " + exp  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentExpression",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ArgumentExpression ::=
            {
              Object RESULT =null;
		 RESULT = ""  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentExpression",20, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Primary ::= INTEGERLITERAL
            {
              String RESULT =null;
		int integerleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int integerright = ((Symbol)CUP$Parser$stack.peek()).right;
		String integer = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = integer ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",21, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Primary ::= REALLITERAL
            {
              String RESULT =null;
		int realleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int realright = ((Symbol)CUP$Parser$stack.peek()).right;
		String real = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = real  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",21, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Primary ::= BOOLEANLITERAL
            {
              String RESULT =null;
		int boolleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((Symbol)CUP$Parser$stack.peek()).right;
		String bool = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bool  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",21, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Primary ::= THIS
            {
              String RESULT =null;
		 RESULT = "this";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",21, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Primary ::= IDENTIFIER
            {
              String RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",21, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
