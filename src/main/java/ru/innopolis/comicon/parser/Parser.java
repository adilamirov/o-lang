
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ru.innopolis.comicon.parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends lr_parser {

 public final Class getSymbolContainer() {
    return MySymbol.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\005\004\000\002\005\002\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\006\006\000" +
    "\002\007\012\000\002\007\011\000\002\007\010\000\002" +
    "\003\011\000\002\003\007\000\002\010\007\000\002\010" +
    "\006\000\002\012\006\000\002\015\005\000\002\015\002" +
    "\000\002\014\005\000\002\013\004\000\002\013\004\000" +
    "\002\013\002\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\017\005\000\002\020" +
    "\007\000\002\021\011\000\002\021\007\000\002\022\003" +
    "\000\002\022\004\000\002\011\004\000\002\023\006\000" +
    "\002\023\005\000\002\023\002\000\002\024\006\000\002" +
    "\025\005\000\002\025\002\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\004\004\006\001\002\000\006\002\143\004" +
    "\006\001\002\000\006\002\uffff\004\uffff\001\002\000\004" +
    "\031\007\001\002\000\006\005\010\006\011\001\002\000" +
    "\004\031\136\001\002\000\012\007\ufffd\010\013\011\021" +
    "\012\020\001\002\000\012\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\001\002\000\004\031\133\001\002\000\012\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\001\002\000\012\007\ufffd\010" +
    "\013\011\021\012\020\001\002\000\012\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\001\002\000\004\007\131\001\002\000" +
    "\006\006\123\021\025\001\002\000\004\031\022\001\002" +
    "\000\006\021\025\027\024\001\002\000\006\006\113\027" +
    "\112\001\002\000\004\031\036\001\002\000\004\031\026" +
    "\001\002\000\004\027\034\001\002\000\006\022\uffef\025" +
    "\uffef\001\002\000\006\022\032\025\031\001\002\000\004" +
    "\031\026\001\002\000\006\006\ufff1\027\ufff1\001\002\000" +
    "\006\022\ufff0\025\ufff0\001\002\000\004\031\035\001\002" +
    "\000\006\022\uffee\025\uffee\001\002\000\004\006\037\001" +
    "\002\000\016\007\uffeb\010\uffeb\013\uffeb\015\uffeb\020\uffeb" +
    "\031\uffeb\001\002\000\016\007\052\010\013\013\042\015" +
    "\046\020\051\031\050\001\002\000\020\007\uffea\010\uffea" +
    "\013\uffea\015\uffea\017\uffea\020\uffea\031\uffea\001\002\000" +
    "\014\012\062\031\061\032\054\033\056\034\057\001\002" +
    "\000\020\007\uffe7\010\uffe7\013\uffe7\015\uffe7\017\uffe7\020" +
    "\uffe7\031\uffe7\001\002\000\020\007\uffe9\010\uffe9\013\uffe9" +
    "\015\uffe9\017\uffe9\020\uffe9\031\uffe9\001\002\000\020\007" +
    "\uffe8\010\uffe8\013\uffe8\015\uffe8\017\uffe8\020\uffe8\031\uffe8" +
    "\001\002\000\014\012\062\031\061\032\054\033\056\034" +
    "\057\001\002\000\020\007\uffec\010\uffec\013\uffec\015\uffec" +
    "\017\uffec\020\uffec\031\uffec\001\002\000\004\030\075\001" +
    "\002\000\030\007\uffe2\010\uffe2\012\062\013\uffe2\015\uffe2" +
    "\017\uffe2\020\uffe2\031\uffe2\032\054\033\056\034\057\001" +
    "\002\000\012\007\ufff7\010\ufff7\011\ufff7\012\ufff7\001\002" +
    "\000\020\007\uffed\010\uffed\013\uffed\015\uffed\017\uffed\020" +
    "\uffed\031\uffed\001\002\000\032\007\uffd9\010\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\022\uffd9\025" +
    "\uffd9\026\uffd9\031\uffd9\001\002\000\032\007\uffdd\010\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\022" +
    "\uffdd\025\uffdd\026\uffdd\031\uffdd\001\002\000\032\007\uffd8" +
    "\010\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\022\uffd8\025\uffd8\026\uffd8\031\uffd8\001\002\000\032" +
    "\007\uffd7\010\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\022\uffd7\025\uffd7\026\uffd7\031\uffd7\001\002" +
    "\000\020\007\uffe1\010\uffe1\013\uffe1\015\uffe1\017\uffe1\020" +
    "\uffe1\031\uffe1\001\002\000\032\007\uffd5\010\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\022\uffd5\025" +
    "\uffd5\026\uffd5\031\uffd5\001\002\000\032\007\uffd6\010\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\022" +
    "\uffd6\025\uffd6\026\uffd6\031\uffd6\001\002\000\032\007\uffe0" +
    "\010\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\022\uffe0\025\uffe0\026\064\031\uffe0\001\002\000\004" +
    "\031\065\001\002\000\034\007\uffde\010\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\067\022\uffde" +
    "\025\uffde\026\uffde\031\uffde\001\002\000\032\007\uffdf\010" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\022\uffdf\025\uffdf\026\uffdf\031\uffdf\001\002\000\014\012" +
    "\062\031\061\032\054\033\056\034\057\001\002\000\006" +
    "\022\uffda\025\uffda\001\002\000\006\022\073\025\072\001" +
    "\002\000\014\012\062\031\061\032\054\033\056\034\057" +
    "\001\002\000\032\007\uffdc\010\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc\025\uffdc\026\uffdc" +
    "\031\uffdc\001\002\000\006\022\uffdb\025\uffdb\001\002\000" +
    "\014\012\062\031\061\032\054\033\056\034\057\001\002" +
    "\000\020\007\uffe6\010\uffe6\013\uffe6\015\uffe6\017\uffe6\020" +
    "\uffe6\031\uffe6\001\002\000\004\016\100\001\002\000\020" +
    "\007\uffeb\010\uffeb\013\uffeb\015\uffeb\017\uffeb\020\uffeb\031" +
    "\uffeb\001\002\000\020\007\103\010\013\013\042\015\046" +
    "\017\102\020\051\031\050\001\002\000\016\007\uffeb\010" +
    "\uffeb\013\uffeb\015\uffeb\020\uffeb\031\uffeb\001\002\000\020" +
    "\007\uffe3\010\uffe3\013\uffe3\015\uffe3\017\uffe3\020\uffe3\031" +
    "\uffe3\001\002\000\016\007\105\010\013\013\042\015\046" +
    "\020\051\031\050\001\002\000\020\007\uffe4\010\uffe4\013" +
    "\uffe4\015\uffe4\017\uffe4\020\uffe4\031\uffe4\001\002\000\004" +
    "\014\107\001\002\000\016\007\uffeb\010\uffeb\013\uffeb\015" +
    "\uffeb\020\uffeb\031\uffeb\001\002\000\016\007\111\010\013" +
    "\013\042\015\046\020\051\031\050\001\002\000\020\007" +
    "\uffe5\010\uffe5\013\uffe5\015\uffe5\017\uffe5\020\uffe5\031\uffe5" +
    "\001\002\000\004\031\116\001\002\000\016\007\uffeb\010" +
    "\uffeb\013\uffeb\015\uffeb\020\uffeb\031\uffeb\001\002\000\016" +
    "\007\115\010\013\013\042\015\046\020\051\031\050\001" +
    "\002\000\012\007\ufff6\010\ufff6\011\ufff6\012\ufff6\001\002" +
    "\000\004\006\117\001\002\000\016\007\uffeb\010\uffeb\013" +
    "\uffeb\015\uffeb\020\uffeb\031\uffeb\001\002\000\016\007\121" +
    "\010\013\013\042\015\046\020\051\031\050\001\002\000" +
    "\012\007\ufff8\010\ufff8\011\ufff8\012\ufff8\001\002\000\004" +
    "\006\126\001\002\000\016\007\uffeb\010\uffeb\013\uffeb\015" +
    "\uffeb\020\uffeb\031\uffeb\001\002\000\016\007\125\010\013" +
    "\013\042\015\046\020\051\031\050\001\002\000\012\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\001\002\000\016\007\uffeb" +
    "\010\uffeb\013\uffeb\015\uffeb\020\uffeb\031\uffeb\001\002\000" +
    "\016\007\130\010\013\013\042\015\046\020\051\031\050" +
    "\001\002\000\012\007\ufff3\010\ufff3\011\ufff3\012\ufff3\001" +
    "\002\000\006\002\ufff4\004\ufff4\001\002\000\004\007\ufffe" +
    "\001\002\000\004\027\134\001\002\000\004\031\135\001" +
    "\002\000\024\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\015\ufff9\017\ufff9\020\ufff9\031\ufff9\001\002\000\004\006" +
    "\137\001\002\000\012\007\ufffd\010\013\011\021\012\020" +
    "\001\002\000\004\007\141\001\002\000\006\002\ufff5\004" +
    "\ufff5\001\002\000\006\002\001\004\001\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\006\002\003\003\004\001\001\000\004\003" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\014\005\016\006" +
    "\013\007\015\010\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\014\005\131\006" +
    "\013\007\015\010\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\121\001\001\000\002\001\001\000" +
    "\004\012\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\026\001\001\000\002\001\001\000\004\015" +
    "\027\001\001\000\002\001\001\000\004\014\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\037\001\001" +
    "\000\016\006\052\016\046\017\040\020\043\021\044\022" +
    "\042\001\001\000\002\001\001\000\006\011\105\026\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\076\026\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\057\026\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\065\001\001\000" +
    "\002\001\001\000\006\011\067\026\054\001\001\000\004" +
    "\025\070\001\001\000\002\001\001\000\006\011\073\026" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\075\026\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\100\001\001\000\016\006\052\016\046" +
    "\017\040\020\043\021\044\022\042\001\001\000\004\013" +
    "\103\001\001\000\002\001\001\000\016\006\052\016\046" +
    "\017\040\020\043\021\044\022\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\107\001\001\000\016" +
    "\006\052\016\046\017\040\020\043\021\044\022\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\113" +
    "\001\001\000\016\006\052\016\046\017\040\020\043\021" +
    "\044\022\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\117\001\001\000\016\006\052\016\046\017" +
    "\040\020\043\021\044\022\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\123\001\001\000\016\006" +
    "\052\016\046\017\040\020\043\021\044\022\042\001\001" +
    "\000\002\001\001\000\004\013\126\001\001\000\016\006" +
    "\052\016\046\017\040\020\043\021\044\022\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\014\005\137\006\013\007\015\010" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String CLASS_NAME;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Program ClassDeclaration 
            {
              Object RESULT =null;
		int cdleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object cd = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 System.out.print(cd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= ClassDeclaration 
            {
              Object RESULT =null;
		int cdleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object cd = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 System.out.print(cd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MemeberDeclarations ::= MemeberDeclaration MemeberDeclarations 
            {
              Object RESULT =null;
		int memberleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int memberright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object member = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int membersleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int membersright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object members = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = member + "\n" + members; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclarations",3, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MemeberDeclarations ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclarations",3, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MemeberDeclaration ::= VariableDeclaration 
            {
              Object RESULT =null;
		int varleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = var; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclaration",2, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MemeberDeclaration ::= MethodDeclaration 
            {
              Object RESULT =null;
		int methodleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int methodright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object method = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = method; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclaration",2, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MemeberDeclaration ::= ConstructorDeclaration 
            {
              Object RESULT =null;
		int cnstrctrleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int cnstrctrright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object cnstrctr = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cnstrctr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclaration",2, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VariableDeclaration ::= VAR IDENTIFIER COLON IDENTIFIER 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((Symbol)CUP$Parser$stack.peek()).right;
		String type = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "public " + type + " " + name + "; "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",4, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MethodDeclaration ::= METHOD IDENTIFIER Parameters COLON IDENTIFIER IS Body END 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int argsleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int argsright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object args = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int return_typeleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int return_typeright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String return_type = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = "public " + return_type + " " + name + args + " { " + body + "}";
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MethodDeclaration ::= METHOD IDENTIFIER COLON IDENTIFIER IS Body END 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int return_typeleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int return_typeright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String return_type = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = "public " + return_type + name + " () { " + body + "}";
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MethodDeclaration ::= METHOD IDENTIFIER Parameters IS Body END 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int argsleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int argsright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object args = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = "public void " + name + args + " { " + body + "}";
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ClassDeclaration ::= CLASS IDENTIFIER EXTENDS IDENTIFIER IS MemeberDeclarations END 
            {
              Object RESULT =null;
		int class_idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int class_idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String class_id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int extends_idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int extends_idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String extends_id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int membersleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int membersright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object members = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
  members = members.toString().replaceAll("<CLASSNAME>", class_id);
  RESULT = "public class " + class_id + " extends " + extends_id + " { " + members + "}";
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",1, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ClassDeclaration ::= CLASS IDENTIFIER IS MemeberDeclarations END 
            {
              Object RESULT =null;
		int class_idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int class_idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String class_id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int membersleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int membersright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object members = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    members = members.toString().replaceAll("<CLASSNAME>", class_id);
    RESULT = "public class " + class_id + " {\n" + members + "}";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",1, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstructorDeclaration ::= THIS Parameters IS Body END 
            {
              Object RESULT =null;
		int parametersleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int parametersright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object parameters = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "public " + "<CLASSNAME>" + parameters + "{\n" + body + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",6, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstructorDeclaration ::= THIS IS Body END 
            {
              Object RESULT =null;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "public " + "<CLASSNAME>" + "()" + "{\n" + body + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",6, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Parameters ::= LPAREN ParameterDeclaration ParameterDeclarations RPAREN 
            {
              Object RESULT =null;
		int paramleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object param = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramsleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object params = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "(" + param + params + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",8, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ParameterDeclarations ::= ParameterDeclarations COMMA ParameterDeclaration 
            {
              Object RESULT =null;
		int paramsleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object params = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object param = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = params + "," + param; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclarations",11, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ParameterDeclarations ::= 
            {
              Object RESULT =null;
		 RESULT = "" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclarations",11, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ParameterDeclaration ::= IDENTIFIER COLON IDENTIFIER 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((Symbol)CUP$Parser$stack.peek()).right;
		String type = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = name + " " + type ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclaration",10, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Body ::= Body VariableDeclaration 
            {
              Object RESULT =null;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = body + "\n" + var ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",9, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Body ::= Body Statement 
            {
              Object RESULT =null;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statementleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int statementright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object statement = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = body + "\n" + statement;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",9, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Body ::= 
            {
              Object RESULT =null;
		 RESULT = ""  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",9, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= Assignment 
            {
              Object RESULT =null;
		int assignmentleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int assignmentright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object assignment = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = assignment + "\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= WhileLoop 
            {
              Object RESULT =null;
		int whileloopleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int whileloopright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object whileloop = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = whileloop + "\n" ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= IfStatement 
            {
              Object RESULT =null;
		int ifstatementleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int ifstatementright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object ifstatement = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ifstatement + "\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= ReturnStatement 
            {
              Object RESULT =null;
		int returnstatementleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int returnstatementright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object returnstatement = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = returnstatement + "\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Assignment ::= IDENTIFIER ASSIGN Expression 
            {
              Object RESULT =null;
		int identifierleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identifierright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String identifier = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object expr = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = identifier + " = " + expr + ";"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",13, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // WhileLoop ::= WHILE Expression LOOP Body END 
            {
              Object RESULT =null;
		int exprleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expr = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "while ( " + expr + " ) {\n" + body + "}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileLoop",14, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IfStatement ::= IF Expression THEN Body ELSE Body END 
            {
              Object RESULT =null;
		int exprleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object expr = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int body_thenleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int body_thenright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object body_then = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int body_elseleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int body_elseright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body_else = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
  RESULT = "if ( " + expr + ") { " + body_then + "} else { " + body_else + "}" ;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",15, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IfStatement ::= IF Expression THEN Body END 
            {
              Object RESULT =null;
		int exprleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expr = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
RESULT = "if ( " + expr + " ) { " + body + "}"  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",15, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ReturnStatement ::= RETURN 
            {
              Object RESULT =null;
		 RESULT = "return;"  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",16, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ReturnStatement ::= RETURN Expression 
            {
              Object RESULT =null;
		int exprleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object expr = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "return" + expr + ";"  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",16, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= Primary ExpressionBody 
            {
              Object RESULT =null;
		int primleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int primright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String prim = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = prim + body ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ExpressionBody ::= ExpressionBody DOT IDENTIFIER Arguments 
            {
              Object RESULT =null;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object arg = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = body + "." + id + arg;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionBody",17, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExpressionBody ::= ExpressionBody DOT IDENTIFIER 
            {
              Object RESULT =null;
		int bodyleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bodyright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object body = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = body + "." + id ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionBody",17, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExpressionBody ::= 
            {
              Object RESULT =null;
		 RESULT = ""  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionBody",17, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Arguments ::= LPAREN Expression ArgumentExpression RPAREN 
            {
              Object RESULT =null;
		int expleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aexpleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aexpright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object aexp = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "(" + exp + aexp + ")" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",18, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ArgumentExpression ::= ArgumentExpression COMMA Expression 
            {
              Object RESULT =null;
		int aexpleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aexpright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object aexp = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = aexp + ", " + exp  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentExpression",19, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ArgumentExpression ::= 
            {
              Object RESULT =null;
		 RESULT = ""  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentExpression",19, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Primary ::= INTEGERLITERAL 
            {
              String RESULT =null;
		int integerleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int integerright = ((Symbol)CUP$Parser$stack.peek()).right;
		String integer = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = integer ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",20, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Primary ::= REALLITERAL 
            {
              String RESULT =null;
		int realleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int realright = ((Symbol)CUP$Parser$stack.peek()).right;
		String real = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = real  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",20, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Primary ::= BOOLEANLITERAL 
            {
              String RESULT =null;
		int boolleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((Symbol)CUP$Parser$stack.peek()).right;
		String bool = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bool  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",20, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Primary ::= THIS 
            {
              String RESULT =null;
		 RESULT = "this";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",20, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Primary ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",20, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
