
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cup;

import java_cup.runtime.*;
import ru.innopolis.comicon.lexer.OLangTokenizer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MySymbolsClassName.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\011\000\002\003\007\000\002\005\004" +
    "\000\002\005\002\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\006\000\002\007\012\000\002" +
    "\007\011\000\002\007\010\000\002\010\007\000\002\010" +
    "\006\000\002\012\006\000\002\015\005\000\002\015\002" +
    "\000\002\014\005\000\002\013\004\000\002\013\004\000" +
    "\002\013\002\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\017\005\000\002\020" +
    "\007\000\002\021\011\000\002\021\007\000\002\022\003" +
    "\000\002\022\004\000\002\011\004\000\002\023\006\000" +
    "\002\023\005\000\002\023\002\000\002\024\006\000\002" +
    "\025\005\000\002\025\002\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\006\002\uffff\010\006\001\002\000\004\002" +
    "\143\001\002\000\006\002\uffff\010\006\001\002\000\004" +
    "\004\007\001\002\000\006\011\010\012\011\001\002\000" +
    "\004\004\136\001\002\000\012\013\ufffb\014\013\015\021" +
    "\016\020\001\002\000\004\013\ufff8\001\002\000\004\004" +
    "\133\001\002\000\004\013\ufffa\001\002\000\012\013\ufffb" +
    "\014\013\015\021\016\020\001\002\000\004\013\ufff9\001" +
    "\002\000\004\013\131\001\002\000\006\012\123\025\025" +
    "\001\002\000\004\004\022\001\002\000\006\025\025\033" +
    "\024\001\002\000\006\012\113\033\112\001\002\000\004" +
    "\004\036\001\002\000\004\004\026\001\002\000\004\033" +
    "\034\001\002\000\006\026\uffef\033\uffef\001\002\000\006" +
    "\026\031\033\032\001\002\000\006\012\ufff1\033\ufff1\001" +
    "\002\000\004\004\026\001\002\000\006\026\ufff0\033\ufff0" +
    "\001\002\000\004\004\035\001\002\000\006\026\uffee\033" +
    "\uffee\001\002\000\004\012\037\001\002\000\016\004\uffeb" +
    "\013\uffeb\014\uffeb\017\uffeb\021\uffeb\024\uffeb\001\002\000" +
    "\016\004\050\013\052\014\013\017\042\021\046\024\051" +
    "\001\002\000\020\004\uffea\013\uffea\014\uffea\017\uffea\021" +
    "\uffea\023\uffea\024\uffea\001\002\000\014\004\061\005\054" +
    "\006\056\007\057\016\062\001\002\000\020\004\uffe7\013" +
    "\uffe7\014\uffe7\017\uffe7\021\uffe7\023\uffe7\024\uffe7\001\002" +
    "\000\020\004\uffe9\013\uffe9\014\uffe9\017\uffe9\021\uffe9\023" +
    "\uffe9\024\uffe9\001\002\000\020\004\uffe8\013\uffe8\014\uffe8" +
    "\017\uffe8\021\uffe8\023\uffe8\024\uffe8\001\002\000\014\004" +
    "\061\005\054\006\056\007\057\016\062\001\002\000\020" +
    "\004\uffec\013\uffec\014\uffec\017\uffec\021\uffec\023\uffec\024" +
    "\uffec\001\002\000\004\034\075\001\002\000\030\004\uffe2" +
    "\005\054\006\056\007\057\013\uffe2\014\uffe2\016\062\017" +
    "\uffe2\021\uffe2\023\uffe2\024\uffe2\001\002\000\004\013\ufff5" +
    "\001\002\000\020\004\uffed\013\uffed\014\uffed\017\uffed\021" +
    "\uffed\023\uffed\024\uffed\001\002\000\032\004\uffd9\013\uffd9" +
    "\014\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\026\uffd9\031\uffd9\032\uffd9\001\002\000\032\004\uffdd" +
    "\013\uffdd\014\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\026\uffdd\031\uffdd\032\uffdd\001\002\000\032" +
    "\004\uffd8\013\uffd8\014\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\026\uffd8\031\uffd8\032\uffd8\001\002" +
    "\000\032\004\uffd7\013\uffd7\014\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\026\uffd7\031\uffd7\032\uffd7" +
    "\001\002\000\020\004\uffe1\013\uffe1\014\uffe1\017\uffe1\021" +
    "\uffe1\023\uffe1\024\uffe1\001\002\000\032\004\uffd5\013\uffd5" +
    "\014\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\026\uffd5\031\uffd5\032\uffd5\001\002\000\032\004\uffd6" +
    "\013\uffd6\014\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\026\uffd6\031\uffd6\032\uffd6\001\002\000\032" +
    "\004\uffe0\013\uffe0\014\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\026\uffe0\031\uffe0\032\064\001\002" +
    "\000\004\004\065\001\002\000\034\004\uffde\013\uffde\014" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\067\026\uffde\031\uffde\032\uffde\001\002\000\032\004" +
    "\uffdf\013\uffdf\014\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\026\uffdf\031\uffdf\032\uffdf\001\002\000" +
    "\014\004\061\005\054\006\056\007\057\016\062\001\002" +
    "\000\006\026\uffda\031\uffda\001\002\000\006\026\073\031" +
    "\072\001\002\000\014\004\061\005\054\006\056\007\057" +
    "\016\062\001\002\000\032\004\uffdc\013\uffdc\014\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\026\uffdc" +
    "\031\uffdc\032\uffdc\001\002\000\006\026\uffdb\031\uffdb\001" +
    "\002\000\014\004\061\005\054\006\056\007\057\016\062" +
    "\001\002\000\020\004\uffe6\013\uffe6\014\uffe6\017\uffe6\021" +
    "\uffe6\023\uffe6\024\uffe6\001\002\000\004\022\100\001\002" +
    "\000\020\004\uffeb\013\uffeb\014\uffeb\017\uffeb\021\uffeb\023" +
    "\uffeb\024\uffeb\001\002\000\020\004\050\013\103\014\013" +
    "\017\042\021\046\023\102\024\051\001\002\000\016\004" +
    "\uffeb\013\uffeb\014\uffeb\017\uffeb\021\uffeb\024\uffeb\001\002" +
    "\000\020\004\uffe3\013\uffe3\014\uffe3\017\uffe3\021\uffe3\023" +
    "\uffe3\024\uffe3\001\002\000\016\004\050\013\105\014\013" +
    "\017\042\021\046\024\051\001\002\000\020\004\uffe4\013" +
    "\uffe4\014\uffe4\017\uffe4\021\uffe4\023\uffe4\024\uffe4\001\002" +
    "\000\004\020\107\001\002\000\016\004\uffeb\013\uffeb\014" +
    "\uffeb\017\uffeb\021\uffeb\024\uffeb\001\002\000\016\004\050" +
    "\013\111\014\013\017\042\021\046\024\051\001\002\000" +
    "\020\004\uffe5\013\uffe5\014\uffe5\017\uffe5\021\uffe5\023\uffe5" +
    "\024\uffe5\001\002\000\004\004\116\001\002\000\016\004" +
    "\uffeb\013\uffeb\014\uffeb\017\uffeb\021\uffeb\024\uffeb\001\002" +
    "\000\016\004\050\013\115\014\013\017\042\021\046\024" +
    "\051\001\002\000\004\013\ufff4\001\002\000\004\012\117" +
    "\001\002\000\016\004\uffeb\013\uffeb\014\uffeb\017\uffeb\021" +
    "\uffeb\024\uffeb\001\002\000\016\004\050\013\121\014\013" +
    "\017\042\021\046\024\051\001\002\000\004\013\ufff6\001" +
    "\002\000\004\012\126\001\002\000\016\004\uffeb\013\uffeb" +
    "\014\uffeb\017\uffeb\021\uffeb\024\uffeb\001\002\000\016\004" +
    "\050\013\125\014\013\017\042\021\046\024\051\001\002" +
    "\000\004\013\ufff2\001\002\000\016\004\uffeb\013\uffeb\014" +
    "\uffeb\017\uffeb\021\uffeb\024\uffeb\001\002\000\016\004\050" +
    "\013\130\014\013\017\042\021\046\024\051\001\002\000" +
    "\004\013\ufff3\001\002\000\006\002\ufffd\010\ufffd\001\002" +
    "\000\004\013\ufffc\001\002\000\004\033\134\001\002\000" +
    "\014\004\061\005\054\006\056\007\057\016\062\001\002" +
    "\000\020\004\ufff7\013\ufff7\014\ufff7\017\ufff7\021\ufff7\023" +
    "\ufff7\024\ufff7\001\002\000\004\012\137\001\002\000\012" +
    "\013\ufffb\014\013\015\021\016\020\001\002\000\004\013" +
    "\141\001\002\000\006\002\ufffe\010\ufffe\001\002\000\004" +
    "\002\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\002\141\003\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\014\005" +
    "\016\006\013\007\015\010\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\014\005" +
    "\131\006\013\007\015\010\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\121\001\001\000\002\001" +
    "\001\000\004\012\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\026\001\001\000\002\001\001\000" +
    "\004\015\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\037" +
    "\001\001\000\016\006\052\016\046\017\040\020\043\021" +
    "\044\022\042\001\001\000\002\001\001\000\006\011\105" +
    "\026\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\076\026\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\057\026\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\065\001" +
    "\001\000\002\001\001\000\006\011\067\026\054\001\001" +
    "\000\004\025\070\001\001\000\002\001\001\000\006\011" +
    "\073\026\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\075\026\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\100\001\001\000\016\006\052" +
    "\016\046\017\040\020\043\021\044\022\042\001\001\000" +
    "\004\013\103\001\001\000\002\001\001\000\016\006\052" +
    "\016\046\017\040\020\043\021\044\022\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\107\001\001" +
    "\000\016\006\052\016\046\017\040\020\043\021\044\022" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\113\001\001\000\016\006\052\016\046\017\040\020" +
    "\043\021\044\022\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\117\001\001\000\016\006\052\016" +
    "\046\017\040\020\043\021\044\022\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\123\001\001\000" +
    "\016\006\052\016\046\017\040\020\043\021\044\022\042" +
    "\001\001\000\002\001\001\000\004\013\126\001\001\000" +
    "\016\006\052\016\046\017\040\020\043\021\044\022\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\134\026\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\014\005" +
    "\137\006\013\007\015\010\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 s.init(); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    OLangTokenizer s;
    Parser(OLangTokenizer s){ this.s=s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ClassDeclaration Program 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassDeclaration ::= CLASS IDENTIFIER EXTENDS IDENTIFIER IS MemeberDeclarations END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassDeclaration ::= CLASS IDENTIFIER IS MemeberDeclarations END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MemeberDeclarations ::= MemeberDeclaration MemeberDeclarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclarations",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MemeberDeclarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclarations",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MemeberDeclarations ::= VariableDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclarations",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MemeberDeclarations ::= MethodDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclarations",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MemeberDeclarations ::= ConstructorDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MemeberDeclarations",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDeclaration ::= VAR IDENTIFIER COLON Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MethodDeclaration ::= METHOD IDENTIFIER Parameters COLON IDENTIFIER IS Body END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MethodDeclaration ::= METHOD IDENTIFIER COLON IDENTIFIER IS Body END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MethodDeclaration ::= METHOD IDENTIFIER Parameters IS Body END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstructorDeclaration ::= THIS Parameters IS Body END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstructorDeclaration ::= THIS IS Body END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Parameters ::= LPAREN ParameterDeclaration ParameterDeclarations RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ParameterDeclarations ::= ParameterDeclarations COLON ParameterDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclarations",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ParameterDeclarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclarations",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ParameterDeclaration ::= IDENTIFIER COLON IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Body ::= Body VariableDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Body ::= Body Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Body ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= Assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= WhileLoop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= IfStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= ReturnStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Assignment ::= IDENTIFIER ASSIGN Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // WhileLoop ::= WHILE Expression LOOP Body END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileLoop",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IfStatement ::= IF Expression THEN Body ELSE Body END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IfStatement ::= IF Expression THEN Body END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ReturnStatement ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ReturnStatement ::= RETURN Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= Primary ExpressionBody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ExpressionBody ::= ExpressionBody DOT IDENTIFIER Arguments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionBody",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExpressionBody ::= ExpressionBody DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionBody",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExpressionBody ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionBody",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Arguments ::= LPAREN Expression ArgumentExpression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ArgumentExpression ::= ArgumentExpression COMMA Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentExpression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ArgumentExpression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentExpression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Primary ::= INTEGERLITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Primary ::= REALLITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Primary ::= BOOLEANLITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Primary ::= THIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Primary ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
