package cup;

import java_cup.runtime.*;
import ru.innopolis.comicon.lexer.OLangTokenizer;

parser code {:
    // Connect this parser to a scanner!
    OLangTokenizer s;
    Parser(OLangTokenizer s){ this.s=s; }
:}


init with {: s.init(); :};
scan with {: return s.next_token(); :};

terminal IDENTIFIER;
terminal INTEGERLITERAL, REALLITERAL, BOOLEANLITERAL;
terminal CLASS, EXTENDS, IS, END, VAR, METHOD, THIS, WHILE, LOOP, IF, THEN, ELSE, RETURN;
terminal LPAREN, RPAREN, LBRACKET, RBRCKET, COMMA, DOT, COLON;
terminal ASSIGN;

nonterminal Program;
nonterminal ClassDeclaration, MemeberDeclaration, MemeberDeclarations;
nonterminal VariableDeclaration, MethodDeclaration, ConstructorDeclaration;
nonterminal Expression;
nonterminal Parameters, Body;
nonterminal ParameterDeclaration, ParameterDeclarations;
nonterminal Statement;
nonterminal Assignment;
nonterminal WhileLoop, IfStatement, ReturnStatement;
nonterminal ExpressionBody;
nonterminal Arguments;
nonterminal ArgumentExpression;
nonterminal Primary;

precedence left LPAREN, RPAREN;
precedence right RETURN;

Program ::=
  ClassDeclaration Program
|
;

ClassDeclaration ::=
  CLASS IDENTIFIER EXTENDS IDENTIFIER IS MemeberDeclarations END
| CLASS IDENTIFIER IS MemeberDeclarations END
;

MemeberDeclarations ::=
  MemeberDeclaration MemeberDeclarations
|
;

MemeberDeclarations ::=
  VariableDeclaration
| MethodDeclaration
| ConstructorDeclaration
;

VariableDeclaration ::=
  VAR IDENTIFIER COLON Expression
;


MethodDeclaration ::=
  METHOD IDENTIFIER Parameters COLON IDENTIFIER IS Body END
| METHOD IDENTIFIER COLON IDENTIFIER IS Body END
| METHOD IDENTIFIER Parameters IS Body END
;


ConstructorDeclaration ::=
  THIS Parameters IS Body END
| THIS IS Body END
;


Parameters ::=
  LPAREN ParameterDeclaration ParameterDeclarations RPAREN
;


ParameterDeclarations ::=
  ParameterDeclarations COLON ParameterDeclaration
|
;


ParameterDeclaration ::=
  IDENTIFIER COLON IDENTIFIER
;


Body ::=
  Body VariableDeclaration
| Body Statement
|
;

Statement ::=
  Assignment
| WhileLoop
| IfStatement
| ReturnStatement
;

Assignment ::=
  IDENTIFIER ASSIGN Expression
;

WhileLoop ::=
  WHILE Expression LOOP Body END
 ;

IfStatement ::=
  IF Expression THEN Body ELSE Body END
| IF Expression THEN Body END ;

ReturnStatement ::=
  RETURN
| RETURN Expression
;

Expression ::=
  Primary ExpressionBody
;

ExpressionBody ::=
  ExpressionBody DOT IDENTIFIER Arguments
| ExpressionBody DOT IDENTIFIER
|
;

Arguments ::=
  LPAREN Expression ArgumentExpression RPAREN
;

ArgumentExpression ::=
  ArgumentExpression COMMA Expression
|
;

Primary ::=
  INTEGERLITERAL
| REALLITERAL
| BOOLEANLITERAL
| THIS
| IDENTIFIER
;
